JavaScript has several built-in data types that can be categorized into **primitive types** and **non-primitive types**.

### Primitive Data Types
These are the most basic data types in JavaScript. They are immutable, meaning their value cannot be changed.

1. **Number**
   - Represents both integer and floating-point numbers.
   - Example:
     ```javascript
     let age = 25;  // Integer
     let price = 99.99;  // Floating-point
     ```

2. **String**
   - Represents a sequence of characters (text).
   - Strings are enclosed in single quotes (`' '`), double quotes (`" "`), or backticks (`` ` ` ``).
   - Example:
     ```javascript
     let name = "Veronica";
     let greeting = 'Hello, world!';
     let template = `Hello, ${name}!`;  // Using backticks for template literals
     ```

3. **Boolean**
   - Represents a logical value that can be either `true` or `false`.
   - Example:
     ```javascript
     let isLoggedIn = true;
     let hasPaid = false;
     ```

4. **Undefined**
   - A variable that has been declared but has not been assigned a value has the type `undefined`.
   - Example:
     ```javascript
     let something;  // Undefined because no value is assigned
     console.log(something);  // Outputs: undefined
     ```

5. **Null**
   - Represents the intentional absence of any object value.
   - Example:
     ```javascript
     let emptyValue = null;
     ```

6. **Symbol** (ES6/ES2015)
   - Represents a unique and immutable identifier, often used as keys for object properties.
   - Example:
     ```javascript
     let symbol1 = Symbol('description');
     let symbol2 = Symbol('description');
     console.log(symbol1 === symbol2);  // Outputs: false
     ```

7. **BigInt** (ES11/ES2020)
   - Represents whole numbers larger than the `Number` type can safely represent.
   - Example:
     ```javascript
     let bigNumber = BigInt(123456789012345678901234567890);
     let anotherBigNumber = 123456789012345678901234567890n;
     ```

### Non-Primitive Data Types (Objects)
These types can hold collections of values and more complex entities.

1. **Object**
   - Represents a collection of key-value pairs.
   - Example:
     ```javascript
     let user = {
       name: 'Veronica',
       age: 25,
       isAdmin: true
     };
     ```

2. **Array**
   - A special type of object used to store ordered lists of values.
   - Example:
     ```javascript
     let fruits = ['apple', 'banana', 'cherry'];
     ```

3. **Function**
   - A callable object that encapsulates a block of code.
   - Example:
     ```javascript
     function greet() {
       console.log('Hello!');
     }
     ```

4. **Date**
   - Used to work with dates and times.
   - Example:
     ```javascript
     let today = new Date();
     ```

5. **RegExp**
   - Represents regular expressions, used for pattern matching within strings.
   - Example:
     ```javascript
     let pattern = /ab+c/;
     ```

### Special Cases
- **Type `typeof` Operator**: You can use `typeof` to check the data type of a variable.
  ```javascript
  console.log(typeof 42);           // "number"
  console.log(typeof 'hello');      // "string"
  console.log(typeof true);         // "boolean"
  console.log(typeof undefined);    // "undefined"
  console.log(typeof null);         // "object" (this is a historical bug)
  console.log(typeof Symbol());     // "symbol"
  console.log(typeof 123n);         // "bigint"
  console.log(typeof {});           // "object"
  console.log(typeof []);           // "object"
  console.log(typeof function(){}); // "function"
  ```

JavaScript's flexibility with types can be both powerful and tricky, so understanding these basics is crucial for effective coding!